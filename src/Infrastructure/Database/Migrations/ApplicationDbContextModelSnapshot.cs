// <auto-generated />
using System;
using System.Collections.Generic;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AcademyUser", b =>
                {
                    b.Property<Guid>("AcademiesId")
                        .HasColumnType("uuid")
                        .HasColumnName("academies_id");

                    b.Property<Guid>("AdministratorsId")
                        .HasColumnType("uuid")
                        .HasColumnName("administrators_id");

                    b.HasKey("AcademiesId", "AdministratorsId")
                        .HasName("pk_academy_user");

                    b.HasIndex("AdministratorsId")
                        .HasDatabaseName("ix_academy_user_administrators_id");

                    b.ToTable("academy_user", "public");
                });

            modelBuilder.Entity("Domain.Academies.Academy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contact");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("LogoAttachmentUrl")
                        .HasColumnType("text")
                        .HasColumnName("logo_attachment_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("TenantName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tenant_name");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_at");

                    b.HasKey("Id")
                        .HasName("pk_academies");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_academies_name");

                    b.HasIndex("TenantName")
                        .IsUnique()
                        .HasDatabaseName("ix_academies_tenant_name");

                    b.ToTable("academies", "public");
                });

            modelBuilder.Entity("Domain.Academies.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AcademyId")
                        .HasColumnType("uuid")
                        .HasColumnName("academy_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("NextClassId")
                        .HasColumnType("uuid")
                        .HasColumnName("next_class_id");

                    b.Property<Guid?>("PreviousClassId")
                        .HasColumnType("uuid")
                        .HasColumnName("previous_class_id");

                    b.Property<int>("Section")
                        .HasColumnType("integer")
                        .HasColumnName("section");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_at");

                    b.HasKey("Id")
                        .HasName("pk_classes");

                    b.HasIndex("AcademyId")
                        .HasDatabaseName("ix_classes_academy_id");

                    b.HasIndex("NextClassId")
                        .IsUnique()
                        .HasDatabaseName("ix_classes_next_class_id");

                    b.HasIndex("PreviousClassId")
                        .IsUnique()
                        .HasDatabaseName("ix_classes_previous_class_id");

                    b.ToTable("classes", "public");
                });

            modelBuilder.Entity("Domain.Academies.SchoolYear", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AcademyId")
                        .HasColumnType("uuid")
                        .HasColumnName("academy_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_at");

                    b.HasKey("Id")
                        .HasName("pk_school_years");

                    b.HasIndex("AcademyId")
                        .HasDatabaseName("ix_school_years_academy_id");

                    b.ToTable("school_years", "public");
                });

            modelBuilder.Entity("Domain.Courses.ClassCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AcademyId")
                        .HasColumnType("uuid")
                        .HasColumnName("academy_id");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid")
                        .HasColumnName("class_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("SchoolYearId")
                        .HasColumnType("uuid")
                        .HasColumnName("school_year_id");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_at");

                    b.HasKey("Id")
                        .HasName("pk_class_courses");

                    b.HasIndex("ClassId")
                        .HasDatabaseName("ix_class_courses_class_id");

                    b.ToTable("class_courses", "public");
                });

            modelBuilder.Entity("Domain.Courses.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ClassCourseId")
                        .HasColumnType("uuid")
                        .HasColumnName("class_course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_at");

                    b.HasKey("Id")
                        .HasName("pk_courses");

                    b.HasIndex("ClassCourseId")
                        .HasDatabaseName("ix_courses_class_course_id");

                    b.ToTable("courses", "public");
                });

            modelBuilder.Entity("Domain.Courses.CourseCredit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<double>("Credit")
                        .HasColumnType("double precision")
                        .HasColumnName("credit");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_at");

                    b.HasKey("Id")
                        .HasName("pk_course_credits");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_course_credits_course_id");

                    b.ToTable("course_credits", "public");
                });

            modelBuilder.Entity("Domain.Todos.TodoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.PrimitiveCollection<List<string>>("Labels")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("labels");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_todo_item");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_todo_item_user_id");

                    b.ToTable("todo_item", "public");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", "public");
                });

            modelBuilder.Entity("AcademyUser", b =>
                {
                    b.HasOne("Domain.Academies.Academy", null)
                        .WithMany()
                        .HasForeignKey("AcademiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academy_user_academies_academies_id");

                    b.HasOne("Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("AdministratorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_academy_user_users_administrators_id");
                });

            modelBuilder.Entity("Domain.Academies.Class", b =>
                {
                    b.HasOne("Domain.Academies.Academy", "Academy")
                        .WithMany()
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_classes_academies_academy_id");

                    b.HasOne("Domain.Academies.Class", "NextClass")
                        .WithOne()
                        .HasForeignKey("Domain.Academies.Class", "NextClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_classes_classes_next_class_id");

                    b.HasOne("Domain.Academies.Class", "PreviousClass")
                        .WithOne()
                        .HasForeignKey("Domain.Academies.Class", "PreviousClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_classes_classes_previous_class_id");

                    b.Navigation("Academy");

                    b.Navigation("NextClass");

                    b.Navigation("PreviousClass");
                });

            modelBuilder.Entity("Domain.Academies.SchoolYear", b =>
                {
                    b.HasOne("Domain.Academies.Academy", null)
                        .WithMany("SchoolYears")
                        .HasForeignKey("AcademyId")
                        .HasConstraintName("fk_school_years_academies_academy_id");
                });

            modelBuilder.Entity("Domain.Courses.ClassCourse", b =>
                {
                    b.HasOne("Domain.Academies.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_class_courses_classes_class_id");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Domain.Courses.Course", b =>
                {
                    b.HasOne("Domain.Courses.ClassCourse", null)
                        .WithMany("Courses")
                        .HasForeignKey("ClassCourseId")
                        .HasConstraintName("fk_courses_class_courses_class_course_id");
                });

            modelBuilder.Entity("Domain.Courses.CourseCredit", b =>
                {
                    b.HasOne("Domain.Courses.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_course_credits_courses_course_id");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Domain.Todos.TodoItem", b =>
                {
                    b.HasOne("Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_todo_item_users_user_id");
                });

            modelBuilder.Entity("Domain.Academies.Academy", b =>
                {
                    b.Navigation("SchoolYears");
                });

            modelBuilder.Entity("Domain.Courses.ClassCourse", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
